"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

This file has been modified for a secure production deployment.
Sensitive values are loaded from environment variables.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
tmp = os.path.join(BASE_DIR, 'templates')


# ==============================================================================
# üí£ CRITICAL SECURITY CONFIGURATION FOR PRODUCTION üí£
# These values MUST be set as environment variables in your production server (AWS).
# ==============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
# Load the SECRET_KEY from an environment variable.
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-default-key-for-local-development-only')

# SECURITY WARNING: don't run with debug turned on in production!
# On AWS, this environment variable should be set to 'False'.
DEBUG = False

# Set this to your actual domain name(s) in production.
# Example: ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'www.mysite.com,mysite.com').split(',')
ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] # Add your production domain here or load from env


# ==============================================================================
# Application definition
# ==============================================================================

INSTALLED_APPS = [
    'avisos.apps.AvisosConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'crispy_forms',
    'crispy_tailwind',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware', # Should be high up
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'avisos.middleware.AdminProtectionMiddleware', # This can be here or higher depending on its function
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [tmp],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# ==============================================================================
# Database Configuration
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# Credentials are loaded securely from environment variables.
# ==============================================================================

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'Eva04'),
        'USER': os.getenv('DB_USER', 'admin'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'admin123'),
        'HOST': os.getenv('DB_HOST', 'cloud4.cvcevyn7cnze.us-east-1.rds.amazonaws.com'),
        'PORT': os.getenv('DB_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}


# ==============================================================================
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# ==============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# ==============================================================================
# Internationalization & Static/Media Files
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# ==============================================================================

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ==============================================================================
# Crispy Forms & Custom Settings
# ==============================================================================

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

ADMIN_SITE = 'avisos.admin.admin_site'


# ==============================================================================
# üõ°Ô∏è PRODUCTION SECURITY SETTINGS üõ°Ô∏è
# These settings enhance security, especially when using HTTPS.
# ==============================================================================

# CORS Configuration - Specify allowed origins instead of allowing all
# Do NOT use CORS_ALLOW_ALL_ORIGINS = True in production
CORS_ALLOWED_ORIGINS = [
    # Add the domain of your frontend application here
    # e.g., "https://www.my-app-frontend.com"
]
# If your frontend and backend are on the same domain, you might not need CORS.

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# HTTPS Settings - In production, your site must run over HTTPS
# These should be set to True if you have HTTPS configured (which you should)
SESSION_COOKIE_SECURE = not DEBUG # Becomes True when DEBUG is False
CSRF_COOKIE_SECURE = not DEBUG    # Becomes True when DEBUG is False
SESSION_COOKIE_HTTPONLY = True    # Default, but good to be explicit
CSRF_COOKIE_HTTPONLY = False      # Default is False, which is correct

# Optional but Recommended for stronger HTTPS enforcement
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000 # 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True


# ==============================================================================
# Logging Configuration
# ==============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'avisos': {
            'handlers': ['console'],
            'level': 'INFO', # Use INFO or WARNING in production, not DEBUG
            'propagate': True,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}